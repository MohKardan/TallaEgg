using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;
using Microsoft.Extensions.Logging;
using TallaEgg.TelegramBot.Core.Interfaces;
using TallaEgg.TelegramBot.Core.Models;

namespace TallaEgg.TelegramBot.Infrastructure.Handlers;

public class BotHandler : IBotHandler
{
    private readonly ITelegramBotClient _botClient;
    private readonly IUserService _userService;
    private readonly IPriceService _priceService;
    private readonly IOrderService _orderService;
    private readonly ILogger<BotHandler> _logger;

    public BotHandler(
        ITelegramBotClient botClient,
        IUserService userService,
        IPriceService priceService,
        IOrderService orderService,
        ILogger<BotHandler> logger)
    {
        _botClient = botClient;
        _userService = userService;
        _priceService = priceService;
        _orderService = orderService;
        _logger = logger;
    }

    public async Task HandleUpdateAsync(object updateObj)
    {
        try
        {
            var update = (Update)updateObj;
            switch (update.Type)
            {
                case UpdateType.Message:
                    await HandleMessageAsync(update.Message!);
                    break;
                case UpdateType.CallbackQuery:
                    await HandleCallbackQueryAsync(update.CallbackQuery!);
                    break;
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error handling update");
        }
    }

    public async Task HandleMessageAsync(object messageObj)
    {
        var message = (Message)messageObj;
        if (message.Text == null) return;

        var chatId = message.Chat.Id;
        var text = message.Text.Trim();

        try
        {
            if (text.StartsWith("/start"))
            {
                await HandleStartCommand(message);
            }
            else if (text.StartsWith("/menu"))
            {
                await ShowMainMenu(chatId);
            }
            else if (message.Contact != null)
            {
                await HandlePhoneNumber(message);
            }
            else
            {
                await HandleTextMessage(message);
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error handling message");
            await _botClient.SendTextMessageAsync(chatId, "ÿÆÿ∑ÿß€å€å ÿ±ÿÆ ÿØÿßÿØ. ŸÑÿ∑ŸÅÿßŸã ÿØŸàÿ®ÿßÿ±Ÿá ÿ™ŸÑÿßÿ¥ ⁄©ŸÜ€åÿØ.");
        }
    }

    public async Task HandleCallbackQueryAsync(object callbackQueryObj)
    {
        var callbackQuery = (CallbackQuery)callbackQueryObj;
        var chatId = callbackQuery.Message!.Chat.Id;
        var data = callbackQuery.Data;

        try
        {
            switch (data)
            {
                case "menu_main":
                    await ShowMainMenu(chatId);
                    break;
                case "menu_cash":
                    await ShowCashMenu(chatId);
                    break;
                case "menu_futures":
                    await ShowFuturesMenu(chatId);
                    break;
                case "menu_accounting":
                    await ShowAccountingMenu(chatId);
                    break;
                case "menu_help":
                    await ShowHelpMenu(chatId);
                    break;
                case "menu_wallet":
                    await ShowWalletMenu(chatId);
                    break;
                case "menu_history":
                    await ShowHistoryMenu(chatId);
                    break;
                case "back_to_main":
                    await ShowMainMenu(chatId);
                    break;
                default:
                    if (data?.StartsWith("price_") == true)
                    {
                        await HandlePriceSelection(chatId, data);
                    }
                    else if (data?.StartsWith("order_") == true)
                    {
                        await HandleOrderSelection(chatId, data);
                    }
                    break;
            }

            await _botClient.AnswerCallbackQueryAsync(callbackQuery.Id);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error handling callback query");
            await _botClient.SendTextMessageAsync(chatId, "ÿÆÿ∑ÿß€å€å ÿ±ÿÆ ÿØÿßÿØ. ŸÑÿ∑ŸÅÿßŸã ÿØŸàÿ®ÿßÿ±Ÿá ÿ™ŸÑÿßÿ¥ ⁄©ŸÜ€åÿØ.");
        }
    }

    private async Task HandleStartCommand(Message message)
    {
        var chatId = message.Chat.Id;
        var text = message.Text ?? "";
        var parts = text.Split('?', StringSplitOptions.RemoveEmptyEntries);

        if (parts.Length < 2)
        {
            await _botClient.SendTextMessageAsync(chatId, 
                "ŸÑÿ∑ŸÅÿßŸã ⁄©ÿØ ÿØÿπŸàÿ™ ÿÆŸàÿØ ÿ±ÿß Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ:\n" +
                "/start?[⁄©ÿØ_ÿØÿπŸàÿ™]");
            return;
        }

        var invitationCode = parts[1];
        var user = await _userService.GetUserByTelegramIdAsync(message.From!.Id);

        if (user != null)
        {
            await ShowMainMenu(chatId);
            return;
        }

        var result = await _userService.ValidateInvitationCodeAsync(invitationCode);
        var isValid = result.isValid;
        var messageText = result.message;
        
        if (!isValid)
        {
            await _botClient.SendTextMessageAsync(chatId, messageText);
            return;
        }

        try
        {
            user = await _userService.RegisterUserAsync(
                message.From.Id,
                message.From.Username,
                message.From.FirstName,
                message.From.LastName,
                invitationCode);

            await _botClient.SendTextMessageAsync(chatId, 
                "ÿ´ÿ®ÿ™‚ÄåŸÜÿßŸÖ ÿ®ÿß ŸÖŸàŸÅŸÇ€åÿ™ ÿßŸÜÿ¨ÿßŸÖ ÿ¥ÿØ! üéâ\n" +
                "ŸÑÿ∑ŸÅÿßŸã ÿ¥ŸÖÿßÿ±Ÿá ÿ™ŸÑŸÅŸÜ ÿÆŸàÿØ ÿ±ÿß ÿ®Ÿá ÿßÿ¥ÿ™ÿ±ÿß⁄© ÿ®⁄Øÿ∞ÿßÿ±€åÿØ:");
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error registering user");
            await _botClient.SendTextMessageAsync(chatId, "ÿÆÿ∑ÿß ÿØÿ± ÿ´ÿ®ÿ™‚ÄåŸÜÿßŸÖ. ŸÑÿ∑ŸÅÿßŸã ÿØŸàÿ®ÿßÿ±Ÿá ÿ™ŸÑÿßÿ¥ ⁄©ŸÜ€åÿØ.");
        }
    }

    private async Task HandlePhoneNumber(Message message)
    {
        var chatId = message.Chat.Id;
        var phoneNumber = message.Contact!.PhoneNumber;

        try
        {
            await _userService.UpdateUserPhoneAsync(message.From!.Id, phoneNumber);
            await _botClient.SendTextMessageAsync(chatId, 
                "ÿ¥ŸÖÿßÿ±Ÿá ÿ™ŸÑŸÅŸÜ ÿ®ÿß ŸÖŸàŸÅŸÇ€åÿ™ ÿ´ÿ®ÿ™ ÿ¥ÿØ! ‚úÖ\n" +
                "ÿ≠ÿßŸÑÿß ŸÖ€å‚Äåÿ™ŸàÿßŸÜ€åÿØ ÿßÿ≤ ÿÆÿØŸÖÿßÿ™ ŸÖÿß ÿßÿ≥ÿ™ŸÅÿßÿØŸá ⁄©ŸÜ€åÿØ.");
            
            await ShowMainMenu(chatId);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error updating phone number");
            await _botClient.SendTextMessageAsync(chatId, "ÿÆÿ∑ÿß ÿØÿ± ÿ´ÿ®ÿ™ ÿ¥ŸÖÿßÿ±Ÿá ÿ™ŸÑŸÅŸÜ. ŸÑÿ∑ŸÅÿßŸã ÿØŸàÿ®ÿßÿ±Ÿá ÿ™ŸÑÿßÿ¥ ⁄©ŸÜ€åÿØ.");
        }
    }

    private async Task HandleTextMessage(Message message)
    {
        var chatId = message.Chat.Id;
        var text = message.Text ?? "";

        // Check if user exists and has phone number
        var user = await _userService.GetUserByTelegramIdAsync(message.From!.Id);
        if (user == null || string.IsNullOrEmpty(user.PhoneNumber))
        {
            await _botClient.SendTextMessageAsync(chatId, 
                "ŸÑÿ∑ŸÅÿßŸã ÿßÿ®ÿ™ÿØÿß ÿ´ÿ®ÿ™‚ÄåŸÜÿßŸÖ ⁄©ŸÜ€åÿØ Ÿà ÿ¥ŸÖÿßÿ±Ÿá ÿ™ŸÑŸÅŸÜ ÿÆŸàÿØ ÿ±ÿß Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ.");
            return;
        }

        // Handle different text commands
        switch (text.ToLower())
        {
            case "ŸÇ€åŸÖÿ™":
            case "price":
                await ShowPriceMenu(chatId);
                break;
            case "ÿ≥ŸÅÿßÿ±ÿ¥":
            case "order":
                await ShowOrderMenu(chatId);
                break;
            default:
                await _botClient.SendTextMessageAsync(chatId, 
                    "ŸÑÿ∑ŸÅÿßŸã ÿßÿ≤ ŸÖŸÜŸà€å ÿßÿµŸÑ€å ÿßÿ≥ÿ™ŸÅÿßÿØŸá ⁄©ŸÜ€åÿØ.");
                break;
        }
    }

    private async Task ShowMainMenu(long chatId)
    {
        var keyboard = new InlineKeyboardMarkup(new[]
        {
            new []
            {
                InlineKeyboardButton.WithCallbackData("üí∞ ŸÜŸÇÿØ€å", "menu_cash"),
                InlineKeyboardButton.WithCallbackData("üìà ÿ¢ÿ™€å", "menu_futures")
            },
            new []
            {
                InlineKeyboardButton.WithCallbackData("üìä ÿ≠ÿ≥ÿßÿ®ÿØÿßÿ±€å", "menu_accounting"),
                InlineKeyboardButton.WithCallbackData("‚ùì ÿ±ÿßŸáŸÜŸÖÿß", "menu_help")
            },
            new []
            {
                InlineKeyboardButton.WithCallbackData("üí≥ ⁄©€åŸÅ ŸæŸàŸÑ", "menu_wallet"),
                InlineKeyboardButton.WithCallbackData("üìã ÿ™ÿßÿ±€åÿÆ⁄ÜŸá", "menu_history")
            }
        });

        await _botClient.SendTextMessageAsync(chatId,
            "üéØ ŸÖŸÜŸà€å ÿßÿµŸÑ€å\n" +
            "ŸÑÿ∑ŸÅÿßŸã €å⁄©€å ÿßÿ≤ ⁄Øÿ≤€åŸÜŸá‚ÄåŸáÿß€å ÿ≤€åÿ± ÿ±ÿß ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ€åÿØ:",
            replyMarkup: keyboard);
    }

    private async Task ShowCashMenu(long chatId)
    {
        var keyboard = new InlineKeyboardMarkup(new[]
        {
            new []
            {
                InlineKeyboardButton.WithCallbackData("ü™ô ÿ∑ŸÑÿß", "price_gold"),
                InlineKeyboardButton.WithCallbackData("üíé ÿßŸÑŸÖÿßÿ≥", "price_diamond")
            },
            new []
            {
                InlineKeyboardButton.WithCallbackData("üîô ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", "menu_main")
            }
        });

        await _botClient.SendTextMessageAsync(chatId,
            "üí∞ ŸÖÿπÿßŸÖŸÑÿßÿ™ ŸÜŸÇÿØ€å\n" +
            "ŸÑÿ∑ŸÅÿßŸã ÿØÿßÿ±ÿß€å€å ŸÖŸàÿ±ÿØ ŸÜÿ∏ÿ± ÿÆŸàÿØ ÿ±ÿß ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ€åÿØ:",
            replyMarkup: keyboard);
    }

    private async Task ShowFuturesMenu(long chatId)
    {
        var keyboard = new InlineKeyboardMarkup(new[]
        {
            new []
            {
                InlineKeyboardButton.WithCallbackData("ü™ô ÿ∑ŸÑÿß ÿ¢ÿ™€å", "price_gold_futures"),
                InlineKeyboardButton.WithCallbackData("üíé ÿßŸÑŸÖÿßÿ≥ ÿ¢ÿ™€å", "price_diamond_futures")
            },
            new []
            {
                InlineKeyboardButton.WithCallbackData("üîô ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", "menu_main")
            }
        });

        await _botClient.SendTextMessageAsync(chatId,
            "üìà ŸÖÿπÿßŸÖŸÑÿßÿ™ ÿ¢ÿ™€å\n" +
            "ŸÑÿ∑ŸÅÿßŸã ÿØÿßÿ±ÿß€å€å ŸÖŸàÿ±ÿØ ŸÜÿ∏ÿ± ÿÆŸàÿØ ÿ±ÿß ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ€åÿØ:",
            replyMarkup: keyboard);
    }

    private async Task ShowAccountingMenu(long chatId)
    {
        var keyboard = new InlineKeyboardMarkup(new[]
        {
            new []
            {
                InlineKeyboardButton.WithCallbackData("üí∞ ŸÖŸàÿ¨ŸàÿØ€å", "account_balance"),
                InlineKeyboardButton.WithCallbackData("üìã ÿ™ÿßÿ±€åÿÆ⁄ÜŸá", "account_history")
            },
            new []
            {
                InlineKeyboardButton.WithCallbackData("üîô ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", "menu_main")
            }
        });

        await _botClient.SendTextMessageAsync(chatId,
            "üìä ÿ≠ÿ≥ÿßÿ®ÿØÿßÿ±€å\n" +
            "ŸÑÿ∑ŸÅÿßŸã €å⁄©€å ÿßÿ≤ ⁄Øÿ≤€åŸÜŸá‚ÄåŸáÿß€å ÿ≤€åÿ± ÿ±ÿß ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ€åÿØ:",
            replyMarkup: keyboard);
    }

    private async Task ShowHelpMenu(long chatId)
    {
        var helpText = 
            "‚ùì ÿ±ÿßŸáŸÜŸÖÿß€å ÿßÿ≥ÿ™ŸÅÿßÿØŸá\n\n" +
            "üîπ ÿ®ÿ±ÿß€å ÿ¥ÿ±Ÿàÿπ ŸÖÿπÿßŸÖŸÑŸá:\n" +
            "1. ŸÖŸÜŸà€å ŸÜŸÇÿØ€å €åÿß ÿ¢ÿ™€å ÿ±ÿß ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ€åÿØ\n" +
            "2. ÿØÿßÿ±ÿß€å€å ŸÖŸàÿ±ÿØ ŸÜÿ∏ÿ± ÿ±ÿß ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ€åÿØ\n" +
            "3. ŸÇ€åŸÖÿ™‚ÄåŸáÿß ÿ±ÿß ŸÖÿ¥ÿßŸáÿØŸá ⁄©ŸÜ€åÿØ\n" +
            "4. ÿØ⁄©ŸÖŸá ÿÆÿ±€åÿØ €åÿß ŸÅÿ±Ÿàÿ¥ ÿ±ÿß ÿ®ÿ≤ŸÜ€åÿØ\n\n" +
            "üîπ ÿ®ÿ±ÿß€å ŸÖÿ¥ÿßŸáÿØŸá ŸÖŸàÿ¨ŸàÿØ€å:\n" +
            "ŸÖŸÜŸà€å ÿ≠ÿ≥ÿßÿ®ÿØÿßÿ±€å ÿ±ÿß ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ€åÿØ\n\n" +
            "üîπ ÿ®ÿ±ÿß€å Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å:\n" +
            "ÿ®ÿß ÿßÿØŸÖ€åŸÜ ÿ™ŸÖÿßÿ≥ ÿ®⁄Ø€åÿ±€åÿØ";

        var keyboard = new InlineKeyboardMarkup(new[]
        {
            new []
            {
                InlineKeyboardButton.WithCallbackData("üîô ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", "menu_main")
            }
        });

        await _botClient.SendTextMessageAsync(chatId, helpText, replyMarkup: keyboard);
    }

    private async Task ShowWalletMenu(long chatId)
    {
        var keyboard = new InlineKeyboardMarkup(new[]
        {
            new []
            {
                InlineKeyboardButton.WithCallbackData("üí∞ ŸÖŸàÿ¨ŸàÿØ€å", "wallet_balance"),
                InlineKeyboardButton.WithCallbackData("üí∏ Ÿàÿßÿ±€åÿ≤", "wallet_deposit")
            },
            new []
            {
                InlineKeyboardButton.WithCallbackData("üí≥ ÿ®ÿ±ÿØÿßÿ¥ÿ™", "wallet_withdraw"),
                InlineKeyboardButton.WithCallbackData("üìä ÿ™ÿ±ÿß⁄©ŸÜÿ¥ÿßÿ™", "wallet_transactions")
            },
            new []
            {
                InlineKeyboardButton.WithCallbackData("üîô ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", "menu_main")
            }
        });

        await _botClient.SendTextMessageAsync(chatId,
            "üí≥ ⁄©€åŸÅ ŸæŸàŸÑ\n" +
            "ŸÑÿ∑ŸÅÿßŸã €å⁄©€å ÿßÿ≤ ⁄Øÿ≤€åŸÜŸá‚ÄåŸáÿß€å ÿ≤€åÿ± ÿ±ÿß ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ€åÿØ:",
            replyMarkup: keyboard);
    }

    private async Task ShowHistoryMenu(long chatId)
    {
        var keyboard = new InlineKeyboardMarkup(new[]
        {
            new []
            {
                InlineKeyboardButton.WithCallbackData("üìã ÿ≥ŸÅÿßÿ±ÿ¥ÿßÿ™", "history_orders"),
                InlineKeyboardButton.WithCallbackData("üí∞ ŸÖÿπÿßŸÖŸÑÿßÿ™", "history_trades")
            },
            new []
            {
                InlineKeyboardButton.WithCallbackData("üí≥ ÿ™ÿ±ÿß⁄©ŸÜÿ¥ÿßÿ™", "history_transactions"),
                InlineKeyboardButton.WithCallbackData("üìä ⁄Øÿ≤ÿßÿ±ÿ¥", "history_report")
            },
            new []
            {
                InlineKeyboardButton.WithCallbackData("üîô ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", "menu_main")
            }
        });

        await _botClient.SendTextMessageAsync(chatId,
            "üìã ÿ™ÿßÿ±€åÿÆ⁄ÜŸá\n" +
            "ŸÑÿ∑ŸÅÿßŸã €å⁄©€å ÿßÿ≤ ⁄Øÿ≤€åŸÜŸá‚ÄåŸáÿß€å ÿ≤€åÿ± ÿ±ÿß ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ€åÿØ:",
            replyMarkup: keyboard);
    }

    private async Task ShowPriceMenu(long chatId)
    {
        var keyboard = new InlineKeyboardMarkup(new[]
        {
            new []
            {
                InlineKeyboardButton.WithCallbackData("ü™ô ÿ∑ŸÑÿß", "price_gold"),
                InlineKeyboardButton.WithCallbackData("üíé ÿßŸÑŸÖÿßÿ≥", "price_diamond")
            },
            new []
            {
                InlineKeyboardButton.WithCallbackData("üîô ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", "menu_main")
            }
        });

        await _botClient.SendTextMessageAsync(chatId,
            "üí∞ ŸÇ€åŸÖÿ™‚ÄåŸáÿß\n" +
            "ŸÑÿ∑ŸÅÿßŸã ÿØÿßÿ±ÿß€å€å ŸÖŸàÿ±ÿØ ŸÜÿ∏ÿ± ÿÆŸàÿØ ÿ±ÿß ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ€åÿØ:",
            replyMarkup: keyboard);
    }

    private async Task ShowOrderMenu(long chatId)
    {
        var keyboard = new InlineKeyboardMarkup(new[]
        {
            new []
            {
                InlineKeyboardButton.WithCallbackData("ü™ô ÿ∑ŸÑÿß", "order_gold"),
                InlineKeyboardButton.WithCallbackData("üíé ÿßŸÑŸÖÿßÿ≥", "order_diamond")
            },
            new []
            {
                InlineKeyboardButton.WithCallbackData("üîô ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", "menu_main")
            }
        });

        await _botClient.SendTextMessageAsync(chatId,
            "üìã ÿ≥ŸÅÿßÿ±ÿ¥ÿßÿ™\n" +
            "ŸÑÿ∑ŸÅÿßŸã ÿØÿßÿ±ÿß€å€å ŸÖŸàÿ±ÿØ ŸÜÿ∏ÿ± ÿÆŸàÿØ ÿ±ÿß ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ€åÿØ:",
            replyMarkup: keyboard);
    }

    private async Task HandlePriceSelection(long chatId, string data)
    {
        var asset = data.Replace("price_", "");
        var price = await _priceService.GetLatestPriceAsync(asset);

        if (price == null)
        {
            await _botClient.SendTextMessageAsync(chatId, "ŸÇ€åŸÖÿ™ ÿ®ÿ±ÿß€å ÿß€åŸÜ ÿØÿßÿ±ÿß€å€å ÿØÿ± ÿØÿ≥ÿ™ÿ±ÿ≥ ŸÜ€åÿ≥ÿ™.");
            return;
        }

        var keyboard = new InlineKeyboardMarkup(new[]
        {
            new []
            {
                InlineKeyboardButton.WithCallbackData($"üü¢ ÿÆÿ±€åÿØ {asset}", $"order_{asset}_buy"),
                InlineKeyboardButton.WithCallbackData($"üî¥ ŸÅÿ±Ÿàÿ¥ {asset}", $"order_{asset}_sell")
            },
            new []
            {
                InlineKeyboardButton.WithCallbackData("üîô ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", "menu_main")
            }
        });

        var message = $"üí∞ ŸÇ€åŸÖÿ™ {asset}\n\n" +
                     $"üü¢ ŸÇ€åŸÖÿ™ ÿÆÿ±€åÿØ: {price.BuyPrice:N0} ÿ™ŸàŸÖÿßŸÜ\n" +
                     $"üî¥ ŸÇ€åŸÖÿ™ ŸÅÿ±Ÿàÿ¥: {price.SellPrice:N0} ÿ™ŸàŸÖÿßŸÜ\n" +
                     $"üïê ÿ¢ÿÆÿ±€åŸÜ ÿ®Ÿá‚Äåÿ±Ÿàÿ≤ÿ±ÿ≥ÿßŸÜ€å: {price.UpdatedAt:HH:mm}";

        await _botClient.SendTextMessageAsync(chatId, message, replyMarkup: keyboard);
    }

    private async Task HandleOrderSelection(long chatId, string data)
    {
        var parts = data.Split('_');
        if (parts.Length < 3) return;

        var asset = parts[1];
        var orderType = parts[2];

        var price = await _priceService.GetLatestPriceAsync(asset);
        if (price == null)
        {
            await _botClient.SendTextMessageAsync(chatId, "ŸÇ€åŸÖÿ™ ÿ®ÿ±ÿß€å ÿß€åŸÜ ÿØÿßÿ±ÿß€å€å ÿØÿ± ÿØÿ≥ÿ™ÿ±ÿ≥ ŸÜ€åÿ≥ÿ™.");
            return;
        }

        var orderPrice = orderType == "buy" ? price.BuyPrice : price.SellPrice;
        var orderTypeText = orderType == "buy" ? "ÿÆÿ±€åÿØ" : "ŸÅÿ±Ÿàÿ¥";

        // ÿ∞ÿÆ€åÿ±Ÿá ÿßÿ∑ŸÑÿßÿπÿßÿ™ ÿ≥ŸÅÿßÿ±ÿ¥ ÿØÿ± session (ÿØÿ± ÿ≠ÿßŸÑÿ™ ŸàÿßŸÇÿπ€å ÿ®ÿß€åÿØ ÿßÿ≤ cache €åÿß database ÿßÿ≥ÿ™ŸÅÿßÿØŸá ÿ¥ŸàÿØ)
        var orderInfo = new
        {
            Asset = asset,
            Type = orderType,
            Price = orderPrice,
            ChatId = chatId
        };

        var message = $"üìã ÿ≥ŸÅÿßÿ±ÿ¥ {orderTypeText} {asset}\n\n" +
                     $"üí∞ ŸÇ€åŸÖÿ™: {orderPrice:N0} ÿ™ŸàŸÖÿßŸÜ\n" +
                     $"üìÖ ÿ™ÿßÿ±€åÿÆ: {DateTime.Now:yyyy/MM/dd}\n" +
                     $"‚è∞ ÿ≥ÿßÿπÿ™: {DateTime.Now:HH:mm}\n\n" +
                     $"ŸÑÿ∑ŸÅÿßŸã ÿ™ÿπÿØÿßÿØ Ÿàÿßÿ≠ÿØ ŸÖŸàÿ±ÿØ ŸÜÿ∏ÿ± ÿÆŸàÿØ ÿ±ÿß Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ:";

        var keyboard = new InlineKeyboardMarkup(new[]
        {
            new []
            {
                InlineKeyboardButton.WithCallbackData("üîô ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", "menu_main")
            }
        });

        await _botClient.SendTextMessageAsync(chatId, message, replyMarkup: keyboard);
    }
} 